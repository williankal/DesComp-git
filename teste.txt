#SETUP INICIAL
LDI $0 #Carrega acumulador com valor 0

#ESCREVE 0 NOS DISPLAYS
STA @288 #Armazena o valor 0 no HEX0
STA @289 #Armazena o valor 0 no HEX1
STA @290 #Armazena o valor 0 no HEX2
STA @291 #Armazena o valor 0 no HEX3
STA @292 #Armazena o valor 0 no HEX4
STA @293 #Armazena o valor 0 no HEX5

#APAGANDO OS LEDS
LDI $0
STA @256 #Armazena o valor 0 no LEDR7~0
STA @257 #Armazena o valor 0 no LEDR8
STA @258 #Armazena o valor 0 no LEDR9

#VARIAVEIS QUE ARMAZENAM O VALOR DO DISPLAY
LDI $0 
STA @0 #Armazena o valor do acumulador em MEM[0](unidades)
STA @1 #Armazena o valor do acumulador em MEM[1](dezenas)
STA @2 #Armazena o valor do acumulador em MEM[2](centenas)
STA @3 #Armazena o valor do acumulador em MEM[3](milhares)
STA @4 #Armazena o valor do acumulador em MEM[4](dez milhares)
STA @5 #Armazena o valor do acumulador em MEM[5](cent milhares)

#FLAG 
STA @6 #Armazena o valor do acumulador em MEM[6]=0 (flag)


#VARIAVEIS DE COMPARAÇÃO 
LDI $0
STA @10 #Armaena o valor do acumulador em MEM[10]

LDI $1 #Carrega acumulador com valor 1
STA @11 #Armazena o valor do acumulador em MEM[11]

LDI $9 #Carrega acumulador com valor 9
STA @12 #Armazena o valor do acumulador em MEM[12]

LDI $10 #Carrega acumulador com valor 10
STA @13 #Armazena o valor do acumulador em MEM[13]

#ARMAZENANDO LIMITES DE CONTAGEM 
LDI $9 #Carrega acumulador com valor 9
STA @30  #Armazena o limie de contagem em MEM[30] (unidades)
STA @31 #Armazena o limie de contagem em MEM[31] (dezenas)
STA @32 #Armazena o limie de contagem em MEM[32] (centenas)
STA @33 #Armazena o limie de contagem em MEM[33] (milhares)
STA @34 #Armazena o limie de contagem em MEM[34] (dez milhares)
STA @35 #Armazena o limie de contagem em MEM[35] (cent milhares)

#LOOP PRINCIPAL => CHECA KEY 0/1/FPGA
NOP @0

#CHECA FLAG
LDA @6 #Carrega acumulador com valor da flag MEM[6]
CEQ @11 #Compara se o valor do acumulador é igual a 1
JEQ @42 #Se for igual, pula para o endereço:

#CHECA KEY 0
LDA @352 #Carrega acumulador com o valor de KEY0
CEQ @10 #Compara se o valor do acumulador é igual a 1 (Se key0 foi pressionado)
JEQ @42  #Se for igual 0 pula para o endereço:
JSR @54 #Se for igual 1 pula para o endereço:

#CHECA KEY 1

LDA @353 #Carrega acumulador com o valor de KEY1
CEQ @10 #Compara se o valor do acumulador é igual a 1 (Se key1 foi pressionado)
JEQ @47 #PULA PARA CHECA LIMITPULA PARA CHECA LIMITEE DE CONTAGEM(DEFINIR AINDA) 
JSR @157   #PULA PARA DEFINIR LIMITE(DEFINIR AINDA)
NOP @0
JSR @129 #pula para checar limite(definir ainda)

#CHECA FPGA_RESET

LDA @356 #Carrega acumulador com o valor de FPGA_RESET
CEQ @11 #Compara se o valor do acumulador é igual a 0 
JEQ @52 #Se for igual 0 pula para o endereço:
JSR @118 #Pula para subrotina: RESETAR PLACA(DEFINIR AINDA)

#ATUALIZA DISPLAY
JSR @105 #Pula para subrotina: ATUALIZA DISPLAY(DEFINIR AINDA)
JMP @34 #Volta para o loop principal

#LOOP INCREMENTO 

STA @511 #Limpa KEY 0

#INCREMENTO UNIDADE
LDA @0 #Carrega acumulador com o valor de MEM[0](unidades)
SOMA @11
STA @0
CEQ @13
JEQ @61#Se for igual 10 pula para o endereço incrementar dezena(definir ainda)
RET @0 #VOLTA PRO LOOP PRINCIPAL


#INCREMENTO DEZENA 
LDA @10
STA @0 
LDA @1 #Carrega acumulador com o valor de MEM[1](dezenas)
SOMA @11 #Soma 1 ao valor da dezenas
STA @1
CEQ @13 #Compara o valor com 10
JEQ @69 #Se for igual a 10 pula para incremento centena(DEFINIR AINDA)
RET @0 #return

#INCREMENTO CENTENA
LDA @10
STA @0
LDA @2 #Carrega acumulador com o valor de MEM[2](centenas)
SOMA @11
STA @2 #Salva mem[2] com o valor do acumulador
CEQ @13 #Compara o valor com 10
JEQ @77 #Se for igual a 10 pula para incremento milhar(DEFINIR AINDA)
RET @0

#INCREMENTO MILHAR
LDA @10
STA @0
LDA @3 #Carrega acumulador com o valor de MEM[3](milhares)
SOMA @11 #Soma 1 ao valor da milhar
STA @3 #Salva mem[3] com o valor do acumulador
CEQ @13 #Compara o valor com 10
JEQ @85 #Se for igual a 10 pula para incremento dezena milhar(DEFINIR AINDA)
RET @0

#INCREMENTO DEZENA MILHAR
LDA @10
STA @0
LDA @4 #Carrega acumulador com o valor de MEM[4](dez milhares)
SOMA @11
STA @4 #Salva mem[4] com o valor do acumulador  
CEQ @13 #Compara o valor com 10
JEQ @93 #Se for igual a 10 pula para incremento centena milhar(DEFINIR AINDA)
RET @0

#INCREMENTO CENTENA MILHAR

LDA @10 #Carrega acumulador com o valor de MEM[5](cent milhares)
STA @0 #Salva mem[5] com o valor do acumulador
LDA @5 #Carrega acumulador com o valor de MEM[5](cent milhares)
SOMA @11 
STA @5 #Salva mem[5] com o valor do acumulador
CEQ @13 #Compara o valor com 10
JEQ @101 #PULA PARA LED OVERFL0W (DEFINIR AINDA)
RET @0

#LED OVERFLOW
LDA @11 #Carrega acumulador com 1
STA @6 #Salva o valor do acumulador na mem[6]
STA @258 #Acende o LED de overflow
RET @0

#SUBROTINA ATUALIZA DISPLAY
#HEX0
LDA @0
STA @288

#HEX1
LDA @1
STA @289

#HEX2
LDA @2
STA @290

#HEX3
LDA @3
STA @291

#HEX4
LDA @4
STA @292

#HEX5
LDA @5
STA @293
RET @0

#SUBROTINA RESET FPGA

LDA @10
STA @0 #Salva mem[0] com o valor do acumulador
STA @1 #Salva mem[1] com o valor do acumulador
STA @2 #Salva mem[2] com o valor do acumulador
STA @3 #Salva mem[3] com o valor do acumulador
STA @4 #Salva mem[4] com o valor do acumulador
STA @5 #Salva mem[5] com o valor do acumulador

STA @6 #Salva mem[6] com o valor do acumulador
STA @257 #Apaga o LED[8] de overflow
STA @258 #Apaga o LED[9] de limite de contagem
RET @0




#CHECA LIMITE DE CONTAGEM -ZZZZZZ

#CHECA UNIDADE
LDA @30
CEQ @0
JEQ @133 #Pula para checa dezena(definir ainda)
RET @0

#CHECA dezena
LDA @31
CEQ @1
JEQ @137 #Pula para centena (definir ainda)
RET @0

#CHECA centena
LDA @32
CEQ @2
JEQ @141 #Pula para milhares (definir ainda)
RET @0

#CHECA milhares
LDA @33
CEQ @3
JEQ @145 #Pula para dezena milhares (definir ainda)
RET @0

#CHECA dezena milhares
LDA @34
CEQ @4
JEQ @149 #Pula para centena milhares    (definir ainda)
RET @0

#CHECA centena milhares
LDA @35
CEQ @5
JEQ @153 #Pula para checa flag (definir ainda)
RET @0

#CHECA FLAG
LDA @11
STA @6
STA @158 #Acende o LED[9] de limite de contagem
RET @0

#DEFINICAO DE LIMTE unidades 
STA @510 #zera key1
LDI @1
STA @256 #ativa led7

LDA @353 #carrega acumulador com o valor de key1
CEQ @10
LDA @320 #verifica SW7 to 0
JEQ @165 #pula para definicao de limite dezena(definir ainda)
STA @30 #armazena o novo limite de contagem das unidades

#DEFINICAO DE LIMTE dezenas
STA @510 #zera key1
LDI @3
STA @256 #ativa led7

LDA @353 #carrega acumulador com o valor de key1
CEQ @10 #verifica se key1 = 0
LDA @320 #verifica SW7 to 0
JEQ @173 #PULA PARA definir limite centena(definir ainda)
STA @31 #armazena o novo limite de contagem das dezenas

#DEFINICAO DE LIMTE centenas
STA @510 #zera key1
LDI @7
STA @256 #ativa led7

LDA @353 #carrega acumulador com o valor de key1
CEQ @10 #verifica se key1 = 0
LDA @320 #verifica SW7 to 0
JEQ @181 #PULA PARA definir limite milhares(definir ainda)
STA @32 #armazena o novo limite de contagem das centenas

#DEFINICAO DE LIMTE milhares
STA @510 #zera key1
LDI $15
STA @256 #ativa led7

LDA @353 #carrega acumulador com o valor de key1
CEQ @10     #verifica se key1 = 0
LDA @320 #verifica SW7 to 0
JEQ @189 #PULA PARA definir limite dezena milhares(definir ainda)
STA @33 #armazena o novo limite de contagem das milhares

#DEFINICAO DE LIMTE dezena milhares
STA @510 #zera key1
LDI $31
STA @256 #ativa led7

LDA @353 #carrega acumulador com o valor de key1
CEQ @10 #verifica se key1 = 0
LDA @320 #verifica SW7 to 0
JEQ @197 #PULA PARA definir limite centena milhares(definir ainda)
STA @34 #armazena o novo limite de contagem das dezena milhares

#DEFINICAO DE LIMTE centena milhares
STA @510 #zera key1
LDI $63 
STA @256 

LDA @353  #carrega acumulador com o valor de key1 
CEQ @10 #verifica se key1 = 0
LDA @320 #verifica SW7 to 0
JEQ @198 #PULA PARA definir limite flag(definir ainda)
STA @35

STA @510 #zera key1
LDA @10 #carrega mem[10]
STA @256 #desliga LEDR8
RET @0
