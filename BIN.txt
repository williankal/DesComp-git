
--MAPA MEMORIA

--MEM[10] = UNIDADES

--MEM[11] = DEZENAS

--MEM[12] = CENTENAS

--MEM[13] = MILHARES

--MEM[14] = DEZ MILHARES

--MEM[15] = CENT MILHARES

--MEM[16] = FLAG

--VALORES DE COMPARAÇÕES:

--MEM[0] = 0

--MEM[1] = 1

--MEM[2] = 9

--MEM[3] = 10

--LIMITES DE CONTAGEM:

--MEM[30] = UNIDADES

--MEM[31] = DEZENAS

--MEM[32] = CENTENAS

--MEM[33] = MILHARES

--MEM[34] = DEZ MILHARES

--MEM[35] = CENT MILHARES

--KEYS:

--MEM[352] = KEY0

--MEM[353] = KEY1

--MEM[356] = FPGA_RESET

--LIMPEZA DE LEITURA

--MEM[511] = KEY0

--MEM[510] = KEY1

--MEM[509] = FPGA_RESET

--DISPLAYS:

--MEM[288] = HEX0

--MEM[289] = HEX1

--MEM[290] = HEX2

--MEM[291] = HEX3

--MEM[292] = HEX4

--MEM[293] = HEX5

--LEDS:

--MEM[256] = LEDR7~0

--MEM[257] = LEDR8

--MEM[258] = LEDR9

--SETUP INICIAL
tmp(0) := LDI & '0' & x"00";	-- LDI $0 	#Carrega acumulador com valor 0

--ESCREVE 0 NOS DISPLAYS
tmp(1) := STA & '1' & x"20";	-- STA @288 	#Armazena o valor 0 no HEX0
tmp(2) := STA & '1' & x"21";	-- STA @289 	#Armazena o valor 0 no HEX1
tmp(3) := STA & '1' & x"22";	-- STA @290 	#Armazena o valor 0 no HEX2
tmp(4) := STA & '1' & x"23";	-- STA @291 	#Armazena o valor 0 no HEX3
tmp(5) := STA & '1' & x"24";	-- STA @292 	#Armazena o valor 0 no HEX4
tmp(6) := STA & '1' & x"25";	-- STA @293 	#Armazena o valor 0 no HEX5

--APAGANDO OS LEDS
tmp(7) := LDI & '0' & x"00";	-- LDI $0
tmp(8) := STA & '1' & x"00";	-- STA @256 	#Armazena o valor 0 no LEDR7~0
tmp(9) := STA & '1' & x"01";	-- STA @257 	#Armazena o valor 0 no LEDR8
tmp(10) := STA & '1' & x"02";	-- STA @258 	#Armazena o valor 0 no LEDR9

--VARIAVEIS QUE ARMAZENAM O VALOR DO DISPLAY
tmp(11) := LDI & '0' & x"00";	-- LDI $0 
tmp(12) := STA & '0' & x"0A";	-- STA @10 	#Armazena o valor do acumulador em MEM[10](unidades)
tmp(13) := STA & '0' & x"0B";	-- STA @11 	#Armazena o valor do acumulador em MEM[11](dezenas)
tmp(14) := STA & '0' & x"0C";	-- STA @12 	#Armazena o valor do acumulador em MEM[12](centenas)
tmp(15) := STA & '0' & x"0D";	-- STA @13 	#Armazena o valor do acumulador em MEM[13](milhares)
tmp(16) := STA & '0' & x"0E";	-- STA @14 	#Armazena o valor do acumulador em MEM[14](dez milhares)
tmp(17) := STA & '0' & x"0F";	-- STA @15 	#Armazena o valor do acumulador em MEM[15](cent milhares)

--FLAG 
tmp(18) := STA & '0' & x"10";	-- STA @16 	#Armazena o valor do acumulador em MEM[16]=0 (flag)

--VARIAVEIS DE COMPARAÇÃO 
tmp(19) := LDI & '0' & x"00";	-- LDI $0
tmp(20) := STA & '0' & x"00";	-- STA @0 	#Armaena o valor do acumulador em MEM[0]
tmp(21) := LDI & '0' & x"01";	-- LDI $1 	#Carrega acumulador com valor 1
tmp(22) := STA & '0' & x"01";	-- STA @1 	#Armazena o valor do acumulador em MEM[1]
tmp(23) := LDI & '0' & x"09";	-- LDI $9 	#Carrega acumulador com valor 9
tmp(24) := STA & '0' & x"02";	-- STA @2 	#Armazena o valor do acumulador em MEM[2]
tmp(25) := LDI & '0' & x"0A";	-- LDI $10 	#Carrega acumulador com valor 10
tmp(26) := STA & '0' & x"03";	-- STA @3 	#Armazena o valor do acumulador em MEM[3]

--ARMAZENANDO LIMITES DE CONTAGEM 
tmp(27) := LDI & '0' & x"09";	-- LDI $9 	#Carrega acumulador com valor 9
tmp(28) := STA & '0' & x"1E";	-- STA @30  	#Armazena o limie de contagem em MEM[30] (unidades)
tmp(29) := STA & '0' & x"1F";	-- STA @31 	#Armazena o limie de contagem em MEM[31] (dezenas)
tmp(30) := STA & '0' & x"20";	-- STA @32 	#Armazena o limie de contagem em MEM[32] (centenas)
tmp(31) := STA & '0' & x"21";	-- STA @33 	#Armazena o limie de contagem em MEM[33] (milhares)
tmp(32) := STA & '0' & x"22";	-- STA @34 	#Armazena o limie de contagem em MEM[34] (dez milhares)
tmp(33) := STA & '0' & x"23";	-- STA @35 	#Armazena o limie de contagem em MEM[35] (cent milhares)

--LOOP PRINCIPAL => CHECA KEY 0/1/FPGA

--CHECA FLAG
tmp(34) := LDA & '0' & x"10";	-- LDA @16 	#Carrega acumulador com valor da flag MEM[6]
tmp(35) := CEQ & '0' & x"01";	-- CEQ @1 	#Compara se a flag MEM[16] está ativa
tmp(36) := JEQ & '0' & x"29";	-- JEQ @41 	#Se for igual, pula para o endereço (CHECA KEY1[pula key0])

--CHECA KEY 0
tmp(37) := LDA & '1' & x"60";	-- LDA @352 	#Carrega acumulador com o valor de KEY0
tmp(38) := CEQ & '0' & x"00";	-- CEQ @0 	#OLha para se o valor do acumulador é igual a 1 (Se key0 foi pressionado)
tmp(39) := JEQ & '0' & x"29";	-- JEQ @41 	#Se for igual pula para checa fpga
tmp(40) := JSR & '0' & x"2F";	-- JSR @47 	#LOOP INCREMENTO

--CHECA FPGA_RESET
tmp(41) := LDA & '1' & x"64";	-- LDA @356 	#Carrega acumulador com o valor de FPGA_RESET
tmp(42) := CEQ & '0' & x"01";	-- CEQ @1 	#Compara se o valor do acumulador é igual a 0 
tmp(43) := JEQ & '0' & x"6F";	-- JEQ @111 	#Se foi pressionado para para subrotina RESET FPGA
tmp(44) := JSR & '0' & x"2D";	-- JSR @45 	#Pula para subrotina: RESETAR PLACA(DEFINIR AINDA)

--ATUALIZA DISPLAY
tmp(45) := JSR & '0' & x"62";	-- JSR @98 	#Pula para subrotina: ATUALIZA DISPLAY
tmp(46) := JMP & '0' & x"22";	-- JMP @34 	#Volta para o loop principal

--LOOP INCREMENTO 
tmp(47) := STA & '1' & x"FF";	-- STA @511 	#Limpa KEY 0

--INCREMENTO UNIDADE
tmp(48) := LDA & '0' & x"0A";	-- LDA @10 	#Carrega acumulador com o valor de MEM[10](unidades)
tmp(49) := SOMA & '0' & x"01";	-- SOMA @1 	#Soma 1 ao valor das unidades
tmp(50) := STA & '0' & x"0A";	-- STA @10
tmp(51) := CEQ & '0' & x"03";	-- CEQ @3 	#Compara com valor 10
tmp(52) := JEQ & '0' & x"36";	-- JEQ @54 	#Se for igual 10 pula para o endereço incrementar dezena(definir ainda)
tmp(53) := RET & '0' & x"00";	-- RET @0 	#VOLTA PRO LOOP PRINCIPAL

--INCREMENTO DEZENA 
tmp(54) := LDA & '0' & x"0A";	-- LDA @10
tmp(55) := STA & '0' & x"00";	-- STA @0 	#Salva o valor 0 em MEM[10]
tmp(56) := LDA & '0' & x"0B";	-- LDA @11 	#Carrega acumulador com o valor de MEM[1](dezenas)
tmp(57) := SOMA & '0' & x"01";	-- SOMA @1 	#Soma 1 ao valor da dezenas
tmp(58) := STA & '0' & x"0B";	-- STA @11
tmp(59) := CEQ & '0' & x"03";	-- CEQ @3 	#Compara o valor com 10
tmp(60) := JEQ & '0' & x"3E";	-- JEQ @62 	#Se for igual a 10 pula para incremento centena(DEFINIR AINDA)
tmp(61) := RET & '0' & x"00";	-- RET @0 	#return

--INCREMENTO CENTENA
tmp(62) := LDA & '0' & x"0B";	-- LDA @11 	#Carrega acumulador com o valor de MEM[11](dezenas)
tmp(63) := STA & '0' & x"00";	-- STA @0 	#MEM[11] =0
tmp(64) := LDA & '0' & x"0C";	-- LDA @12 	#Carrega acumulador com o valor de MEM[2](centenas)
tmp(65) := SOMA & '0' & x"01";	-- SOMA @1
tmp(66) := STA & '0' & x"0C";	-- STA @12 	#Salva mem[2] com o valor do acumulador
tmp(67) := CEQ & '0' & x"03";	-- CEQ @3 	#Compara o valor com 10
tmp(68) := JEQ & '0' & x"46";	-- JEQ @70 	#Se for igual a 10 pula para incremento milhar(DEFINIR AINDA)
tmp(69) := RET & '0' & x"00";	-- RET @0

--INCREMENTO MILHAR
tmp(70) := LDA & '0' & x"0C";	-- LDA @12
tmp(71) := STA & '0' & x"00";	-- STA @0
tmp(72) := LDA & '0' & x"0D";	-- LDA @13 	#Carrega acumulador com o valor de MEM[3](milhares)
tmp(73) := SOMA & '0' & x"01";	-- SOMA @1 	#Soma 1 ao valor da milhar
tmp(74) := STA & '0' & x"0D";	-- STA @13 	#Salva mem[3] com o valor do acumulador
tmp(75) := CEQ & '0' & x"03";	-- CEQ @3 	#Compara o valor com 10
tmp(76) := JEQ & '0' & x"4E";	-- JEQ @78 	#Se for igual a 10 pula para incremento dezena milhar(DEFINIR AINDA)
tmp(77) := RET & '0' & x"00";	-- RET @0

--INCREMENTO DEZENA MILHAR
tmp(78) := LDA & '0' & x"0D";	-- LDA @13
tmp(79) := STA & '0' & x"00";	-- STA @0
tmp(80) := LDA & '0' & x"0E";	-- LDA @14 	#Carrega acumulador com o valor de MEM[4](dez milhares)
tmp(81) := SOMA & '0' & x"01";	-- SOMA @1
tmp(82) := STA & '0' & x"0E";	-- STA @14 	#Salva mem[4] com o valor do acumulador  
tmp(83) := CEQ & '0' & x"03";	-- CEQ @3 	#Compara o valor com 10
tmp(84) := JEQ & '0' & x"56";	-- JEQ @86 	#Se for igual a 10 pula para incremento centena milhar(DEFINIR AINDA)
tmp(85) := RET & '0' & x"00";	-- RET @0

--INCREMENTO CENTENA MILHAR
tmp(86) := LDA & '0' & x"0E";	-- LDA @14 	#Carrega acumulador com o valor de MEM[14](dze milhares)
tmp(87) := STA & '0' & x"00";	-- STA @0 	#Salva mem[14] com o valor 0
tmp(88) := LDA & '0' & x"0F";	-- LDA @15 	#Carrega acumulador com o valor de MEM[5](cent milhares)
tmp(89) := SOMA & '0' & x"01";	-- SOMA @1 
tmp(90) := STA & '0' & x"0F";	-- STA @15 	#Salva mem[5] com o valor do acumulador
tmp(91) := CEQ & '0' & x"03";	-- CEQ @3 	#Compara o valor com 10
tmp(92) := JEQ & '0' & x"5E";	-- JEQ @94 	#PULA PARA LED OVERFL0W (DEFINIR AINDA)
tmp(93) := RET & '0' & x"00";	-- RET @0

--LED OVERFLOW
tmp(94) := LDA & '0' & x"01";	-- LDA @1 	#Carrega acumulador com 1
tmp(95) := STA & '0' & x"10";	-- STA @16 	#Salva o valor do acumulador na mem[6]
tmp(96) := STA & '1' & x"02";	-- STA @258 	#Acende o LED de overflow
tmp(97) := RET & '0' & x"00";	-- RET @0

--SUBROTINA ATUALIZA DISPLAY

--HEX0
tmp(98) := LDA & '0' & x"0A";	-- LDA @10
tmp(99) := STA & '1' & x"20";	-- STA @288

--HEX1
tmp(100) := LDA & '0' & x"0B";	-- LDA @11
tmp(101) := STA & '1' & x"21";	-- STA @289

--HEX2
tmp(102) := LDA & '0' & x"0C";	-- LDA @12
tmp(103) := STA & '1' & x"22";	-- STA @290

--HEX3
tmp(104) := LDA & '0' & x"0D";	-- LDA @13
tmp(105) := STA & '1' & x"23";	-- STA @291

--HEX4
tmp(106) := LDA & '0' & x"0E";	-- LDA @14
tmp(107) := STA & '1' & x"24";	-- STA @292

--HEX5
tmp(108) := LDA & '0' & x"0F";	-- LDA @15
tmp(109) := STA & '1' & x"25";	-- STA @293
tmp(110) := RET & '0' & x"00";	-- RET @0

--SUBROTINA RESET FPGA
tmp(111) := STA & '1' & x"FD";	-- STA @509 	#Limpa FPGA_RESET
tmp(112) := LDA & '0' & x"00";	-- LDA @0
tmp(113) := STA & '0' & x"0A";	-- STA @10 	#Salva mem[10] com o valor do acumulador
tmp(114) := STA & '0' & x"0B";	-- STA @11 	#Salva mem[11] com o valor do acumulador
tmp(115) := STA & '0' & x"0C";	-- STA @12 	#Salva mem[12] com o valor do acumulador
tmp(116) := STA & '0' & x"0D";	-- STA @13 	#Salva mem[13] com o valor do acumulador
tmp(117) := STA & '0' & x"0E";	-- STA @14 	#Salva mem[14] com o valor do acumulador
tmp(118) := STA & '0' & x"0F";	-- STA @15 	#Salva mem[15] com o valor do acumulador
tmp(119) := STA & '0' & x"10";	-- STA @16 	#Salva mem[16] com o valor do acumulador
tmp(120) := STA & '1' & x"01";	-- STA @257 	#Apaga o LED[8] de overflow
tmp(121) := STA & '1' & x"02";	-- STA @258 	#Apaga o LED[9] de limite de contagem
tmp(122) := RET & '0' & x"00";	-- RET @0
