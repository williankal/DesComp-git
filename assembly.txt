# Segundos = REG[0] REG[1]
# Uso geral = REG[2] REG[3]
# Armazenanmento de valor na RAM =  MEM[10] unidades
#                                    MEM[11] dezenas
#                                    MEM[12] centenas
#                                    MEM[13] milhares
#                                    MEM[14] dez milhares
#                                    MEM[15] cent milhares
#                                    MEM[16] flag
# Armazenamento de limite na RAM = MEM[30] unidades
#                                  MEM[31] dezenas
#                                  MEM[32] centenas
#                                  MEM[33] milhares
#                                  MEM[34] dez milhares
#                                  MEM[35] cent milhares

# MEM[0] = 0
# MEM[1] = 1
# MEM[2] = 9
# MEM[3] = 10
SETUP:
#LIMPA BOTOESBACK
STA %R0 .CLEARKEY0 #Limpa KEY 0
STA %R0 .CLEARKEY1 #Limpa KEY 1
STA %R0 .CLEARKEY2 #Limpa KEY 2
STA %R0 .CLEARKEY3 #Limpa KEY 3
STA %R0 .CLEARFPGA #Limpa FPGA_RESET

LDI %R0 $0 #Carrega acumulador com valor 0

#ESCREVE 0 NOS DISPLAYS
STA %R0 .HEX0 #Armazena o valor 0 no HEX0
STA %R0 .HEX1 #Armazena o valor 0 no HEX1
STA %R0 .HEX2 #Armazena o valor 0 no HEX2
STA %R0 .HEX3 #Armazena o valor 0 no HEX3
STA %R0 .HEX4 #Armazena o valor 0 no HEX4
STA %R0 .HEX5 #Armazena o valor 0 no HEX5

#APAGANDO OS LEDS
LDI %R0 $0
STA %R0 .LED07 #Armazena o valor 0 no LEDR7~0
STA %R0 .LED8 #Armazena o valor 0 no LEDR8
STA %R0 .LED9 #Armazena o valor 0 no LEDR9

#VARIAVEIS QUE ARMAZENAM O VALOR DO DISPLAY
LDI %R0 $0 
STA %R0 @10 #Armazena o valor do acumulador em MEM[10](unidades)
STA %R0 @11 #Armazena o valor do acumulador em MEM[11](dezenas)
STA %R0 @12 #Armazena o valor do acumulador em MEM[12](centenas)
STA %R0 @13 #Armazena o valor do acumulador em MEM[13](milhares)
STA %R0 @14 #Armazena o valor do acumulador em MEM[14](dez milhares)
STA %R0 @15 #Armazena o valor do acumulador em MEM[15](cent milhares)

#FLAG 
STA %R0 @16 #Armazena o valor do acumulador em MEM[16]=0 (flag)

#VARIAVEIS DE COMPARAÇÃO 
LDI %R0 $0
STA %R0 @0 #Armaena o valor do acumulador em MEM[0]

LDI %R0 $1 #Carrega acumulador com valor 1
STA %R0 @1 #Armazena o valor do acumulador em MEM[1]

LDI %R0 $9 #Carrega acumulador com valor 9
STA %R0 @2 #Armazena o valor do acumulador em MEM[2]

LDI %R0 $10 #Carrega acumulador com valor 10
STA %R0 @3 #Armazena o valor do acumulador em MEM[3]

#ARMAZENANDO LIMITES DE CONTAGEM
LDI %R0 $9 #Carrega acumulador com valor 9
STA %R0 @30  #Armazena o limie de contagem em MEM[30] (unidades)
STA %R0 @31 #Armazena o limie de contagem em MEM[31] (dezenas)
STA %R0 @32 #Armazena o limie de contagem em MEM[32] (centenas)
STA %R0 @33 #Armazena o limie de contagem em MEM[33] (milhares)
STA %R0 @34 #Armazena o limie de contagem em MEM[34] (dez milhares)
STA %R0 @35 #Armazena o limie de contagem em MEM[35] (cent milhares)

LOOP:
#CHECA KEY 0
LDA %R0 .KEY0 #Carrega acumulador com o valor de KEY0
ANDI %R0 $1 #Faz a operação AND com o valor 1
CEQ %R0 @1 #OLha para se o valor do acumulador é igual a 1 (Se key0 foi pressionado)
JEQ %R0 .INCREMENTA #Se for igual pula para fpga_reset
BACK:

#CHECA FPGA_RESET
LDA %R0 .RST_FPGA #Carrega acumulador com o valor de FPGA_RESET
ANDI %R0 $1 #Faz a operação AND com o valor 1
CEQ %R0 @1 #Compara se o valor do acumulador é igual a 0 
JEQ %R0 .SETUP #Se  n foi pressionado pulta para atualiza display

#ATUALIZA DISPLAY
JSR %R0 .ATUALIZA_DISPLAY #Chama a subrotina atualiza display
JMP %R0 .LOOP #Volta para o loop principal

#loop INCREMENTO
INCREMENTA:
STA %R0 .CLEARKEY0 #Limpa KEY 0

INCREMENTO_UNIDADE:
LDA %R0 @10 #Carrega acumulador com o valor de MEM[10](unidades)
SOMA %R0 @1 #Soma 1 ao valor das unidades
CEQ %R0 @3 #Compara com valor 10
JEQ %R0 .INCREMENTO_DEZENA #Se for igual 10 pula para o endereço incrementar dezena(definir ainda)

STA %R0 @10 #Salva o valor do acumulador em MEM[10](unidades)

JMP %R0 .BACK #VOLTA PRO loop PRINCIPAL

INCREMENTO_DEZENA:
LDI %R0 $0 #Carrega acumulador com valor 0
STA %R0 @10 #Salva o valor 0 em MEM[10]
STA %R0 .HEX0 #Salva o valor do acumulador em HEX0

LDA %R0 @11 #Carrega acumulador com o valor de MEM[1](dezenas)
SOMA %R0 @1 #Soma 1 ao valor da dezenas
CEQ %R0 @3 #Compara o valor com 10
JEQ %R0 .INCREMENTO_CENTENA #Se for igual a 10 pula para incremento centena(DEFINIR AINDA)

STA %R0 @11 #Salva o valor do acumulador em MEM[10](unidades)

JMP %R0 .BACK #return

INCREMENTO_CENTENA:
LDI %R0 $0 #Carrega acumulador com valor 0
STA %R0 @11 #Salva o valor 0 em MEM[11]
STA %R0 .HEX1 #Salva o valor do acumulador em HEX1

LDA %R0 @12 #Carrega acumulador com o valor de MEM[2](centenas)
SOMA %R0 @1
CEQ %R0 @3 #Compara o valor com 10
JEQ %R0 .INCREMENTO_MILHAR #Se for igual a 10 pula para incremento milhar(DEFINIR AINDA)

STA %R0 @12 #Salva o valor do acumulador em MEM[10](unidades)

JMP %R0 .BACK

INCREMENTO_MILHAR:
LDI %R0 $0 #Carrega acumulador com valor 0
STA %R0 @12 #Salva o valor 0 em MEM[12]
STA %R0 .HEX2 #Salva o valor do acumulador em HEX0

LDA %R0 @13 #Carrega acumulador com o valor de MEM[3](milhares)
SOMA %R0 @1 #Soma 1 ao valor da milhar
CEQ %R0 @13 #Compara o valor com 10
JEQ %R0 .INCREMENTO_DEZENA_MILHAR #Se for igual a 10 pula para incremento dezena milhar

STA %R0 @13 #Salva o valor do acumulador em MEM[10](unidades)

JMP %R0 .BACK

INCREMENTO_DEZENA_MILHAR:
LDI %R0 $0 #Carrega acumulador com valor 0
STA %R0 @13 #Salva o valor 0 em MEM[12]
STA %R0 .HEX3 #Salva o valor do acumulador em HEX0

LDA %R0 @14 #Carrega acumulador com o valor de MEM[4](dez milhares)
SOMA %R0 @1
CEQ %R0 @3 #Compara o valor com 10
JEQ %R0 .INCREMENTO_CENTENA_MILHAR #Se for igual a 10 pula para incremento centena milhar

STA %R0 @14 #Salva o valor do acumulador em MEM[10](unidades)

JMP %R0 .BACK

INCREMENTO_CENTENA_MILHAR:
LDI %R0 $0 #Carrega acumulador com valor 0
STA %R0 @14 #Salva o valor 0 em MEM[12]
STA %R0 .HEX4 #Salva o valor do acumulador em HEX0

LDA %R0 @15 #Carrega acumulador com o valor de MEM[5](cent milhares)
SOMA %R0 @1 
CEQ %R0 @3 #Compara o valor com 10
JEQ %R0 .LED_OVERFLOW #PULA PARA LED OVERFL0W (DEFINIR AINDA)

STA %R0 @15 #Salva o valor do acumulador em MEM[10](unidades)

JMP %R0 .BACK

LED_OVERFLOW:
LDA %R0 @1 #Carrega acumulador com 1
STA %R0 @16 #Salva o valor do acumulador na mem[6]
STA %R0 .LED9 #Acende o LED de overflow
RET %R0

#SUBROTINA ATUALIZA DISPLAY
#HEX0
ATUALIZA_DISPLAY:
LDA %R0 @10
STA %R0 .HEX0

#HEX1
LDA %R0 @11
STA %R0 .HEX1

#HEX2
LDA %R0 @12
STA %R0 .HEX2

#HEX3
LDA %R0 @13
STA %R0 .HEX3

#HEX4
LDA %R0 @14
STA %R0 .HEX4

#HEX5
LDA %R0 @15
STA %R0 .HEX5
RET %R0

#SUBROTINA RESET FPGA
STA %R0 @509 #Limpa FPGA_RESET
LDA %R0 @10
STA %R0 @0 #Salva mem[0] com o valor do acumulador
STA %R0 @1 #Salva mem[1] com o valor do acumulador
STA %R0 @2 #Salva mem[2] com o valor do acumulador
STA %R0 @3 #Salva mem[3] com o valor do acumulador
STA %R0 @4 #Salva mem[4] com o valor do acumulador
STA %R0 @5 #Salva mem[5] com o valor do acumulador

STA %R0 @6 #Salva mem[6] com o valor do acumulador
STA %R0 @257 #Apaga o LED[8] de overflow
STA %R0 @258 #Apaga o LED[9] de limite de contagem
RET %R0